rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isReviewer() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'reviewer';
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && 
        ((request.auth.uid == userId && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role'])) || 
        (isAdmin()));
      allow delete: if isAdmin();
    }

    // Programs collection
    match /programs/{programId} {
      // Anyone can read published programs
      allow read: if resource.data.status == 'published' || 
        isAuthenticated() && (
          request.auth.uid == resource.data.authorId ||
          isAdmin() ||
          (isReviewer() && resource.data.status == 'under_review')
        );
      
      // Only authenticated users can create drafts
      allow create: if isAuthenticated() && 
        request.resource.data.status == 'draft' &&
        request.resource.data.authorId == request.auth.uid &&
        (!('submittedProgram' in get(/databases/$(database)/documents/users/$(request.auth.uid)).data) || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.submittedProgram == null);
      
      // Update rules based on status
      allow update: if isAuthenticated() && (
        // Authors can update their drafts
        (resource.data.authorId == request.auth.uid && 
         resource.data.status == 'draft') ||
        // Authors can submit for review
        (resource.data.authorId == request.auth.uid && 
         resource.data.status == 'draft' && 
         request.resource.data.status == 'under_review') ||
        // Reviewers can approve/reject programs under review
        (isReviewer() && 
         resource.data.status == 'under_review' && 
         (request.resource.data.status == 'approved' || 
          request.resource.data.status == 'rejected')) ||
        // Admins can do anything
        isAdmin()
      );
      
      allow delete: if isAuthenticated() && (
        (resource.data.authorId == request.auth.uid && 
         resource.data.status == 'draft') ||
        isAdmin()
      );
    }

    // Votes collection
    match /votes/{voteId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        // Ensure user hasn't already voted on this program
        !exists(/databases/$(database)/documents/votes/$(request.auth.uid + '_' + request.resource.data.programId));
      // Only allow updates to feedback
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.userId &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['feedback']);
      allow delete: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }
  }
}